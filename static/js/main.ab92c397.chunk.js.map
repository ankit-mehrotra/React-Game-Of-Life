{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["operations","emptyGrid","Array","from","length","fill","App","React","useState","running","setRunning","runninRef","useRef","current","grid","setGrid","simulate","useCallback","g","produce","gCopy","i","k","neighbours","forEach","x","y","newI","newK","setTimeout","onClick","style","display","gridTemplateColumns","map","rows","cols","key","newGrid","gridCopy","width","height","border","background","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAKMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAEDC,EAAY,WAChB,OAAOC,MAAMC,KAAK,CAAEC,OAdL,KAcyBC,KACtCH,MAAMC,KAAK,CAAEC,OAdA,KAcoBC,KAAK,KAI3B,SAASC,IAAO,IAAD,EACEC,IAAMC,UAAS,GADjB,mBACrBC,EADqB,KACZC,EADY,KAEtBC,EAAYJ,IAAMK,OAAOH,GAC/BE,EAAUE,QAAUJ,EAHQ,MAIJF,IAAMC,UAAS,kBAAMP,OAJjB,mBAIrBa,EAJqB,KAIfC,EAJe,KAMtBC,EAAWT,IAAMU,aAAY,WAC5BN,EAAUE,UACfE,GAAQ,SAACG,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD4B,IAAD,WAClBC,GACP,IAFyB,eAEhBC,GACP,IAAIC,EAAa,EACjBvB,EAAWwB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAON,EAAII,EACXG,EAAON,EAAII,EAEfC,GAAQ,GACRA,EArCC,IAsCDC,GAAQ,GACRA,EAtCC,KAwCDL,GAAcL,EAAES,GAAMC,OAGtBL,EAAa,GAAKA,EAAa,EACjCH,EAAMC,GAAGC,GAAK,EACO,IAAZJ,EAAEG,GAAGC,IAA2B,IAAfC,IAC1BH,EAAMC,GAAGC,GAAK,IAjBTA,EAAI,EAAGA,EA9BT,GA8BuBA,IAAM,EAA3BA,IADFD,EAAI,EAAGA,EA5BP,GA4BqBA,IAAM,EAA3BA,SAyBbQ,WAAWb,EAAU,QACpB,IACH,OACE,oCACE,4BACEc,QAAS,WACPpB,GAAYD,GACPE,EAAUE,UACbF,EAAUE,SAAU,EACpBG,OAIHP,EAAU,OAAS,SAEtB,4BACEqB,QAAS,WACPpB,GAAW,GACXK,EAAQd,OAHZ,SAQA,yBACE8B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OA/EZ,GA+EY,YAGpBnB,EAAKoB,KAAI,SAACC,EAAMV,GAAP,OACRU,EAAKD,KAAI,SAACE,EAAMV,GAAP,OACP,yBACEW,IAAG,UAAKZ,EAAL,YAAUC,GACbI,QAAS,WACP,IAAMQ,EAAUnB,YAAQL,GAAM,SAACyB,GAC7BA,EAASd,GAAGC,IAAMa,EAASd,GAAGC,MAEhCX,EAAQuB,IAEVP,MAAO,CACLS,MAAO,GACPC,OAAQ,GACRC,OAAQ,kBACRC,WAAY7B,EAAKW,GAAGC,GAAK,YAASkB,aCvF9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC9C,EAAD,OAEF+C,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ab92c397.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport produce from \"immer\";\nconst NUM_ROWS = 50;\nconst NUM_COLS = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\nconst emptyGrid = () => {\n  return Array.from({ length: NUM_ROWS }).fill(\n    Array.from({ length: NUM_COLS }).fill(0)\n  );\n};\n\nexport default function App() {\n  const [running, setRunning] = React.useState(false);\n  const runninRef = React.useRef(running);\n  runninRef.current = running;\n  const [grid, setGrid] = React.useState(() => emptyGrid());\n\n  const simulate = React.useCallback(() => {\n    if (!runninRef.current) return;\n    setGrid((g) => {\n      return produce(g, (gCopy) => {\n        for (let i = 0; i < NUM_COLS; i++) {\n          for (let k = 0; k < NUM_ROWS; k++) {\n            let neighbours = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (\n                newI >= 0 &&\n                newI < NUM_ROWS &&\n                newK >= 0 &&\n                newK < NUM_COLS\n              ) {\n                neighbours += g[newI][newK];\n              }\n            });\n            if (neighbours < 2 || neighbours > 3) {\n              gCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbours === 3) {\n              gCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(simulate, 100);\n  }, []);\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          if (!runninRef.current) {\n            runninRef.current = true;\n            simulate();\n          }\n        }}\n      >\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <button\n        onClick={() => {\n          setRunning(false);\n          setGrid(emptyGrid());\n        }}\n      >\n        Clear\n      </button>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${NUM_COLS},20px)`,\n        }}\n      >\n        {grid.map((rows, x) =>\n          rows.map((cols, y) => (\n            <div\n              key={`${x}-${y}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[x][y] = !gridCopy[x][y];\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                border: \"solid 1px black\",\n                background: grid[x][y] ? \"pink\" : undefined,\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}